import { get } from '$UTILS/requestHandler'

const QUESTONS_FETCHING = 'QUESTONS_FETCHING'
const QUESTONS_FETCHING_FAILURE = 'QUESTONS_FETCHING_FAILURE'
const QUESTONS_FETCHING_SUCCESS = 'QUESTONS_FETCHING_SUCCESS'
const UPDATE_WRONG_ANSWERS = 'UPDATE_WRONG_ANSWERS'
const UPDATE_CORRECT_ANSWERS = 'UPDATE_CORRECT_ANSWERS'

const getQuestionsApi = 'https://cdn.rawgit.com/santosh-suresh/39e58e451d724574f3cb/raw/784d83b460d6c0150e338c34713f3a1c2371e20a/assignment.json'

/**
 * Action Creator: Start User Login Process
 *
 *
 * @returns {Object}  fetchUser Action
 */
function fetchUser() {
  return {
    type : QUESTONS_FETCHING
  }
}

/**
 * Action Creator: User Login Failed
 *
 * @param {String} error if there is error in user login
 *
 * @returns {Object}     USER_FETCHING_FAILURE Action
 */
export function fetchUserFailure(error = 'Error in User Fetching') {
  return {
    type : QUESTONS_FETCHING_FAILURE,
    error
  }
}

/**
 * Action Creator: User Login Successful
 *
 * @param {Object} questionsList user data
 *
 * @returns {Object}        USER_FETCHING_SUCCESS Action
 */
function fetchUserSuccess(questionsList) {
  return {
    type : QUESTONS_FETCHING_SUCCESS,
    questionsList
  }
}

/**
 * [updateAnswers description]
 * @param  {Number} correctAnswers  [description]
 * @return {[type]}             [description]
 */
export function updateCorrectAnswers(correctAnswers) {
  return {
    type : UPDATE_CORRECT_ANSWERS,
    correctAnswers
  }
}

/**
 * [updateAnswers description]
 * @param  {Number} wrongAnswers  [description]
 * @return {[type]}             [description]
 */
export function updateWrongAnswers(wrongAnswers) {
  return {
    type : UPDATE_WRONG_ANSWERS,
    wrongAnswers
  }
}

// Async Action Creators Starts

/**
 * Tobe Async Action Creator: Triggers Network Call to login the user
 *
 * @param {String} email    user email
 * @param {String} password user password
 *
 * @returns {Promise}       login call promise
 */
export function userLogin(email, password) {
  return (dispatch) => {
    dispatch(fetchUser())
    get(getQuestionsApi)
      .then(({ data }) => {
        const response = data

        dispatch(fetchUserSuccess(response))
      })
  }
}

// Async Action Creators Ends
const initialState = {
  isFetching        : false,
  error             : '',
  currentQuestionNo : 0,
  correctAnswers    : 0,
  wrongAnswers      : 0,
  totalQuestions    : 0
}

/**
 * Reducer: Generates `user` state of application state
 *
 * @param {Object} state  user state, default to initialState
 * @param {Object} action action generated by related action creator
 *
 * @returns {Object}      Updated User state.
 */
export default function user(state = initialState, action) {
  const options = {
    QUESTONS_FETCHING : () => ({
      ...state,
      isFetching : true
    }),
    QUESTONS_FETCHING_FAILURE : () => ({
      ...state,
      isFetching : false,
      error      : action.error
    }),
    QUESTONS_FETCHING_SUCCESS : () => ({
      ...state,
      isFetching      : false,
      error           : '',
      questionsList   : action.questionsList,
      totalQuestions  : action.questionsList.length
    }),
    UPDATE_CORRECT_ANSWERS : () => ({
      ...state,
      correctAnswers    : action.correctAnswers,
      currentQuestionNo : state.currentQuestionNo + 1
    }),
    UPDATE_WRONG_ANSWERS : () => ({
      ...state,
      wrongAnswers      : action.wrongAnswers,
      currentQuestionNo : state.currentQuestionNo + 1
    })
  }

  return (action.type && options[action.type]) ? options[action.type]() : state
}
