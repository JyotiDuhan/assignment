import { get } from '$UTILS/requestHandler'

const USER_LOGOUT = 'USER_LOGOUT'
const USER_FETCHING = 'USER_FETCHING'
const USER_FETCHING_FAILURE = 'USER_FETCHING_FAILURE'
const USER_FETCHING_SUCCESS = 'USER_FETCHING_SUCCESS'

/**
 * Tobe Async Action Creator: Triggers Network Call to logout the user
 *
 * @param {String} email    user email
 *
 * @returns {Promise}       logout call promise
 */
export function userLogout(email) {
  return {
    type : USER_LOGOUT,
    email
  }
}

/**
 * Action Creator: Start User Login Process
 *
 *
 * @returns {Object}  fetchUser Action
 */
function fetchUser() {
  return {
    type : USER_FETCHING
  }
}

/**
 * Action Creator: User Login Failed
 *
 * @param {String} error if there is error in user login
 *
 * @returns {Object}     USER_FETCHING_FAILURE Action
 */
export function fetchUserFailure(error = 'Error in User Fetching') {
  return {
    type : USER_FETCHING_FAILURE,
    error
  }
}

/**
 * Action Creator: User Login Successful
 *
 * @param {Object} userInfo user data
 *
 * @returns {Object}        USER_FETCHING_SUCCESS Action
 */
function fetchUserSuccess(userInfo) {
  return {
    type : USER_FETCHING_SUCCESS,
    userInfo
  }
}

// Async Action Creators Starts

/**
 * Tobe Async Action Creator: Triggers Network Call to login the user
 *
 * @param {String} email    user email
 * @param {String} password user password
 *
 * @returns {Promise}       login call promise
 */
export function userLogin(email, password) {
  return (dispatch) => {
    dispatch(fetchUser())
    get('http://localhost:3000/user/')
      .then(({ data }) => {
        const response = data[0]

        dispatch(fetchUserSuccess({
          name  : response.name,
          email : response.email,
          role  : response.role
        }))
      })
  }
}

// Async Action Creators Ends
const initialState = {
  isFetching : false,
  error      : ''
}

/**
 * Reducer: Generates `user` state of application state
 *
 * @param {Object} state  user state, default to initialState
 * @param {Object} action action generated by related action creator
 *
 * @returns {Object}      Updated User state.
 */
export default function user(state = initialState, action) {
  const options = {
    USER_FETCHING : () => ({
      ...state,
      isFetching : true
    }),
    USER_FETCHING_FAILURE : () => ({
      ...state,
      isFetching : false,
      error      : action.error
    }),
    USER_FETCHING_SUCCESS : () => ({
      ...state,
      isFetching : false,
      error      : '',
      userInfo   : action.userInfo
    })
  }

  return (action.type && options[action.type]) ? options[action.type]() : state
}
