const EDIT_BUTTON_CONFIG = 'EDIT_BUTTON_CONFIG'
const EDIT_BUTTON_CONFIG_FAILURE = 'EDIT_BUTTON_CONFIG_FAILURE'
const EDIT_BUTTON_CONFIG_SUCCESS = 'EDIT_BUTTON_CONFIG_SUCCESS'

/**
 * Action Creator: Start Adding Action to Button Process
 *
 *
 * @returns {Object}  edit button config Action
 */
function editButtonConfig() {
  return {
    type : EDIT_BUTTON_CONFIG
  }
}

/**
 * Action Creator: edit button config Failed
 *
 * @param {String} error if there is error in editting button config
 *
 * @returns {Object}     EDIT_BUTTON_CONFIG_FAILURE Action
 */
export function editButtonConfigFailure(error = 'Error in editting button config Fetching') {
  return {
    type : EDIT_BUTTON_CONFIG_FAILURE,
    error
  }
}

/**
 * Action Creator: Edit button config Successful
 *
 * @param {Object} button with respective function
 *
 * @returns {Object}        EDIT_BUTTON_CONFIG_SUCCESS Action
 */
function editButtonConfigSuccess(userInfo) {
  return {
    type : EDIT_BUTTON_CONFIG_SUCCESS,
    userInfo
  }
}

// Async Action Creators Ends
const initialState = {
  isUpdating : false,
  error      : ''
}

/**
 * Reducer: Generates `user` state of application state
 *
 * @param {Object} state  user state, default to initialState
 * @param {Object} action action generated by related action creator
 *
 * @returns {Object}      Updated User state.
 */
export default function buttons(state = initialState, action) {
  const options = {
    EDIT_BUTTON_CONFIG : () => ({
      ...state,
      isUpdating : true
    }),
    EDIT_BUTTON_CONFIG_FAILURE : () => ({
      ...state,
      isUpdating : false,
      error      : action.error
    }),
    EDIT_BUTTON_CONFIG_SUCCESS : () => ({
      ...state,
      isUpdating : false,
      error      : '',
      userInfo   : action.userInfo
    })
  }

  return (action.type && options[action.type]) ? options[action.type]() : state
}
