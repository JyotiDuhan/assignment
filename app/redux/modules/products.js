import { getProductsApi }    from '$UTILS/api'
import { transformProducts } from '$TRANSFORMERS'

import { byBrands }          from '$REDUX/modules/byBrands'
import { byPrice }          from '$REDUX/modules/byPrice'

const FETCHING_PRODUCTS = 'FETCHING_PRODUCTS'
const FETCHING_PRODUCTS_FAILURE = 'FETCHING_PRODUCTS_FAILURE'
const UPDATE_PRODUCTS = 'UPDATE_PRODUCTS'
const UPDATE_ACTIVE_PRODUCTS = 'UPDATE_ACTIVE_PRODUCTS'

/**
 * Action Creator: Start fetching Products
 *
 * @returns {Object}  fetchProducts Action
 */
function fetchProducts() {
  return {
    type : FETCHING_PRODUCTS
  }
}

/**
 * Action Creator: product fetch Failed
 *
 * @param {String} error if there is error in product fetch
 *
 * @returns {Object}     FETCHING_PRODUCTS_FAILURE Action
 */
function fetchProductsFailure(error = 'Error in User Fetching') {
  return {
    type : FETCHING_PRODUCTS_FAILURE,
    error
  }
}

/**
 * Action Creator: productsInfo fetch Successful
 *
 * @param {Object} productsInfo data
 *
 * @returns {Object}        UPDATE_PRODUCTS Action
 */
function fetchProductsSuccess(productsInfo) {
  return {
    type : UPDATE_PRODUCTS,
    productsInfo
  }
}

/**
 * Action Creator: updates Active Products
 * @param  {Array} activeProducts [description]
 * @return {Object}          UPDATE_ACTIVE_PRODUCTS Action
 */
export function updateActiveProducts(activeProducts = []) {
  return {
    type : UPDATE_ACTIVE_PRODUCTS,
    activeProducts
  }
}

/**
 * Create Brands - ID map
 * @param  {Array} filters Filters Array
 * @return {Object}       Action for UPDATE_PRODUCTS_BY_FILTERS
 */
export function updateProductsByFilters(filters) {
  return {
    'type' : 'UPDATE_PRODUCTS_BY_FILTERS',
    filters
  }
}

// Async Action Creators Starts

/**
 * Tobe Async Action Creator: Triggers Network Call to get products
 *
 * @returns {Promise}       get products promise
 */
export function getProducts() {
  return (dispatch) => {
    dispatch(fetchProducts())

    return getProductsApi()
      .then(({ data }) => {
        const productsIdMap = transformProducts(data)

        dispatch(fetchProductsSuccess(productsIdMap))
        dispatch(updateActiveProducts(Object.keys(productsIdMap)))
      })
      .catch((error) => dispatch(fetchProductsFailure(error)))
  }
}

// Async Action Creators Ends
const initialState = {
  isFetching : false,
  error      : '',
  byBrands   : {},
  byPrice    : {}
}

/**
 * Reducer: Generates `user` state of application state
 *
 * @param {Object} state  user state, default to initialState
 * @param {Object} action action generated by related action creator
 *
 * @returns {Object}      Updated User state.
 */
export default function products(state = initialState, action) {
  const options = {
    FETCHING_PRODUCTS : () => ({
      ...state,
      isFetching : true
    }),
    FETCHING_PRODUCTS_FAILURE : () => ({
      ...state,
      isFetching : false,
      error      : action.error
    }),
    UPDATE_PRODUCTS : () => ({
      ...state,
      isFetching     : false,
      error          : '',
      productsMap    : action.productsInfo
    }),
    UPDATE_ACTIVE_PRODUCTS : () => ({
      ...state,
      activeProducts : action.activeProducts
    }),
    UPDATE_PRODUCTS_BY_FILTERS : () => {
      action.products = Object.values(state.productsMap)

      return {
        ...state,
        byBrands : byBrands(state.byBrands, action),
        byPrice  : byPrice(state.byPrice, action)
      }
    }
  }

  return (action.type && options[action.type]) ? options[action.type]() : state
}
